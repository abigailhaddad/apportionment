name: Test and Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout main branch
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for all branches
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validate data integrity
      run: |
        echo "üîç Validating data files..."
        # Check that all year files have corresponding summaries
        year_count=0
        for year_file in site/data/sf133_*_master.csv; do
          if [ -f "$year_file" ]; then
            year=$(basename "$year_file" | sed 's/sf133_\([0-9]*\)_master.csv/\1/')
            summary_file="site/data/all_agencies_obligation_summary_${year}.csv"
            json_file="site/data/all_agencies_summary_${year}.json"
            
            if [ ! -f "$summary_file" ]; then
              echo "‚ùå Missing summary CSV for year $year: $summary_file"
              exit 1
            fi
            
            if [ ! -f "$json_file" ]; then
              echo "‚ùå Missing summary JSON for year $year: $json_file"
              exit 1
            fi
            
            # Check file is not empty
            if [ ! -s "$summary_file" ]; then
              echo "‚ùå Empty summary file for year $year: $summary_file"
              exit 1
            fi
            
            echo "‚úÖ Year $year: All required files present and non-empty"
            year_count=$((year_count + 1))
          fi
        done
        
        if [ $year_count -eq 0 ]; then
          echo "‚ùå No year data files found!"
          exit 1
        fi
        
        echo "‚úÖ Data validation passed for $year_count years"
    
    - name: Test website functionality
      run: |
        echo "üß™ Testing website and scripts..."
        
        # Test that main.py runs without errors
        python main.py --help > /dev/null
        echo "‚úÖ Main script validation passed"
        
        # Test that serve script exists and is executable
        if [ -f "code/serve.py" ]; then
          python code/serve.py --help > /dev/null 2>&1 || echo "‚ö†Ô∏è Serve script help not available (normal)"
          echo "‚úÖ Serve script exists"
        fi
        
        # Validate that JSON files are properly formatted
        json_count=0
        for json_file in site/data/*.json; do
          if [ -f "$json_file" ]; then
            python -c "import json; json.load(open('$json_file'))" || {
              echo "‚ùå Invalid JSON format: $json_file"
              exit 1
            }
            json_count=$((json_count + 1))
          fi
        done
        echo "‚úÖ JSON validation passed for $json_count files"
        
        # Check that required site files exist
        if [ ! -f "site/index.html" ]; then
          echo "‚ùå Missing site/index.html"
          exit 1
        fi
        
        if [ ! -f "site/app.js" ]; then
          echo "‚ùå Missing site/app.js"
          exit 1
        fi
        
        echo "‚úÖ Website files validation passed"
    
    - name: Deploy to prod branch
      run: |
        echo "üöÄ Deploying to prod branch..."
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Create or checkout prod branch
        git checkout -B prod
        
        # Reset prod to main content
        git reset --hard main
        
        # Add deployment timestamp
        echo "Deployed from main at $(date -u '+%Y-%m-%d %H:%M:%S UTC')" > DEPLOYMENT_INFO.txt
        echo "Commit: ${{ github.sha }}" >> DEPLOYMENT_INFO.txt
        git add DEPLOYMENT_INFO.txt
        git commit -m "Deploy from main: ${{ github.sha }} at $(date -u '+%Y-%m-%d %H:%M:%S UTC')" || true
        
        # Push to prod branch
        git push origin prod --force
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
        echo "‚úÖ Successfully deployed to prod branch"
    
    - name: Notification
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "üéâ Production deployment completed successfully!"
          echo "‚úÖ Main branch changes have been validated and deployed to prod"
        else
          echo "‚ùå Production deployment failed!"
          echo "üîç Please check the validation errors above"
        fi